/**
   * @license
   * author: Benjamin Dias Caballero
   * MetroBuda.js v1.0.0
   * Released under the MIT license.
   */
this.MetroBuda=function(){"use strict";class t{constructor({id:t,name:s,color:n,to:i}){this.id=t+"",this.name=s||this.id,this.color=n||null,this.to=i||[]}}class s{constructor(s){if(this.stationList=[],this.graph=[[]],this.debug={showGraph:()=>{const t={},s=this.stationList.map((t=>t.name));s.forEach((s=>{t[s]={}}));for(let n=0;n<this.graph.length;n++)for(let i=0;i<this.graph[n].length;i++)t[s[n]][s[i]]=this.graph[n][i];console.table(t)}},this.name=s.name||"",!Array.isArray(s.stations))throw new Error("field [stations] not found in JSON");var n;this.stationList=s.stations.map((s=>new t(s))),this.graph=(n=this.stationList).map((t=>n.map((s=>t.to.includes(s.id)?1:0))))}getShortestPath(t,s,n){const i=this.stationList.findIndex((s=>s.id===t));if(-1===i)throw new Error("Estacion de partida "+t+" no encontrada");const o=this.stationList.findIndex((t=>t.id===s));if(-1===o)throw new Error("Estacion de destino no encontrada");const{realPaths:a,shortPath:r}=function(t,s,n,i){const o=[],a=[[]],r=[[]];for(let s=0;s<t.length;s++)o[s]=1/0,a[s]=[],r[s]=[];o[s]=0;const e=[];for(;;){let s=1/0,h=-1;for(let n=0;n<t.length;n++)o[n]<s&&!e[n]&&(s=o[n],h=n);if(-1===h)return{distances:o,realPaths:a,shortPath:r};for(let s=0;s<t[h].length;s++)0!==t[h][s]&&o[s]>o[h]+t[h][s]&&(i?null===n[s].color||i===n[s].color?(o[s]=o[h]+t[h][s],r[s]=[...r[h],s]):(o[s]=o[h],r[s]=r[h]):(o[s]=o[h]+t[h][s],r[s]=[...r[h],s]),a[s]=[...a[h],s]);e[h]=!0}}(this.graph,i,this.stationList,n);return r[o]?{shortPath:r[o].map((t=>this.stationList[t].name)),realPath:a[o].map((t=>this.stationList[t].name))}:null}}return{loadNetwork:function(t){return new s(t)},odd_even:t=>t%2==0||"2".includes("")}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cm9idWRhLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL0NsYXNzZXMvU3RhdGlvbi50cyIsIi4uL3NyYy9DbGFzc2VzL1N0YXRpb25OZXR3b3JrLnRzIiwiLi4vc3JjL21ha2VHcmFwaC50cyIsIi4uL3NyYy9kaWprc3RyYS50cyIsIi4uL3NyYy9pbmRleC50cyIsIi4uL3NyYy9sb2FkTmV0d29yay50cyIsIi4uL3NyYy9vZGRfZXZlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0aW9uIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBjb2xvcjogc3RyaW5nIHwgbnVsbDtcclxuICB0bzogc3RyaW5nW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHsgaWQsIG5hbWUsIGNvbG9yLCB0bywgfToge1xyXG4gICAgaWQ6IGFueTsgbmFtZT86IHN0cmluZzsgY29sb3I/OiBzdHJpbmc7IHRvPzogc3RyaW5nW107XHJcbiAgfSkge1xyXG4gICAgdGhpcy5pZCA9IGlkICsgJyc7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lIHx8IHRoaXMuaWQ7XHJcbiAgICB0aGlzLmNvbG9yID0gY29sb3IgfHwgbnVsbDtcclxuICAgIHRoaXMudG8gPSB0byB8fCBbXTtcclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBkaWprc3RyYSBmcm9tIFwiLi4vZGlqa3N0cmFcIjtcclxuaW1wb3J0IG1ha2VHcmFwaCBmcm9tIFwiLi4vbWFrZUdyYXBoXCI7XHJcbmltcG9ydCBTdGF0aW9uIGZyb20gXCIuL1N0YXRpb25cIjtcclxuLyoqXHJcbiAqIFN0YXRpb24gbmV0d29ya1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGlvbk5ldHdvcmsge1xyXG4gIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICBzdGF0aW9uTGlzdDogU3RhdGlvbltdID0gW11cclxuICBncmFwaDogbnVtYmVyW11bXSA9IFtbXV1cclxuXHJcbiAgLy8gcHJpdmF0ZSBfbGFzdERpc3RhbmNlczogbnVtYmVyW10gfCB1bmRlZmluZWRcclxuICAvLyBwcml2YXRlIF9sYXN0UGF0aHM6IG51bWJlcltdW10gfCB1bmRlZmluZWRcclxuXHJcbiAgY29uc3RydWN0b3IobmV0d29ya0pTT046IGFueSkge1xyXG4gICAgdGhpcy5uYW1lID0gbmV0d29ya0pTT04ubmFtZSB8fCAnJ1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5ldHdvcmtKU09OLnN0YXRpb25zKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaWVsZCBbc3RhdGlvbnNdIG5vdCBmb3VuZCBpbiBKU09OXCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdGF0aW9uTGlzdCA9IG5ldHdvcmtKU09OLnN0YXRpb25zLm1hcCgoczogYW55KSA9PiBuZXcgU3RhdGlvbihzKSlcclxuICAgIHRoaXMuZ3JhcGggPSBtYWtlR3JhcGgodGhpcy5zdGF0aW9uTGlzdClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBmcm9tIGlkIG9mIHN0YXRpb24gb2Ygb3JpZ2luIChub3QgYXJyYXkgaW5kZXgpXHJcbiAgICogQHBhcmFtIHRvIGlkIG9mIGRlc3RpbmF0aW9uIHN0YXRpb24gKG5vdCBhcnJheSBpbmRleClcclxuICAgKiBAcGFyYW0gdHJhaW5Db2xvciBzdHJpbmcgd2l0aCB0cmFpbiBjb2xvclxyXG4gICAqIEByZXR1cm4gb2JqZWN0IHsgc2hvcnRQYXRoOiBzdHJpbmdbXSwgcmVhbFBhdGg6IHN0cmluZ1tdIH0gYXJyYXkgY29udGFpbmluZyBpZHMgdG8gbWFrZSB0aGUgc2hvcnRlc3QgcGF0aCBhbmQgcmVhbCBwYXRoLCBvciBOVUxMIGlmIG5vIHBvc2libGUgcGF0aFxyXG4gICAqL1xyXG4gIGdldFNob3J0ZXN0UGF0aChmcm9tOiBzdHJpbmcsIHRvOiBzdHJpbmcsIHRyYWluQ29sb3I/OiBzdHJpbmcpOiB7IHNob3J0UGF0aDogc3RyaW5nW10sIHJlYWxQYXRoOiBzdHJpbmdbXSB9IHwgbnVsbCB7XHJcblxyXG4gICAgY29uc3QgZnJvbVN0YXRpb25pbmRleCA9IHRoaXMuc3RhdGlvbkxpc3QuZmluZEluZGV4KHMgPT4gcy5pZCA9PT0gZnJvbSlcclxuICAgIGlmIChmcm9tU3RhdGlvbmluZGV4ID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKFwiRXN0YWNpb24gZGUgcGFydGlkYSBcIiArIGZyb20gKyBcIiBubyBlbmNvbnRyYWRhXCIpO1xyXG5cclxuICAgIGNvbnN0IHRvU3RhdGlvbmluZGV4ID0gdGhpcy5zdGF0aW9uTGlzdC5maW5kSW5kZXgocyA9PiBzLmlkID09PSB0bylcclxuICAgIGlmICh0b1N0YXRpb25pbmRleCA9PT0gLTEpIHRocm93IG5ldyBFcnJvcihcIkVzdGFjaW9uIGRlIGRlc3Rpbm8gbm8gZW5jb250cmFkYVwiKTtcclxuXHJcblxyXG4gICAgY29uc3QgeyByZWFsUGF0aHMsIHNob3J0UGF0aCB9ID0gZGlqa3N0cmEodGhpcy5ncmFwaCwgZnJvbVN0YXRpb25pbmRleCwgdGhpcy5zdGF0aW9uTGlzdCwgdHJhaW5Db2xvcilcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZygnZGlzdGFuY2VzIDo+PiAnLCBkaXN0YW5jZXNbdG9TdGF0aW9uaW5kZXhdKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdyZWFsUGF0aHMgOj4+ICcsIHJlYWxQYXRoc1t0b1N0YXRpb25pbmRleF0pO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Nob3J0UGF0aCA6Pj4gJywgc2hvcnRQYXRoW3RvU3RhdGlvbmluZGV4XSk7XHJcblxyXG4gICAgLy8gdGhpcy5fbGFzdERpc3RhbmNlcyA9IGRpc3RhbmNlcztcclxuICAgIC8vIHRoaXMuX2xhc3RQYXRocyA9IHNob3J0UGF0aDtcclxuXHJcbiAgICBpZiAoc2hvcnRQYXRoW3RvU3RhdGlvbmluZGV4XSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNob3J0UGF0aDogc2hvcnRQYXRoW3RvU3RhdGlvbmluZGV4XS5tYXAobiA9PiB0aGlzLnN0YXRpb25MaXN0W25dLm5hbWUpLFxyXG4gICAgICAgIHJlYWxQYXRoOiByZWFsUGF0aHNbdG9TdGF0aW9uaW5kZXhdLm1hcChuID0+IHRoaXMuc3RhdGlvbkxpc3Rbbl0ubmFtZSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuXHJcblxyXG5cclxuICAvKipcclxuICAgKiBcclxuICAgKiBzb2xvIHBhcmEgbW9zdHJhciBjb3NhcyBwb3IgbGEgY29uc29sYSwgbm8gZm9ybWFuIHBhcnRlIGRlbCBkZXNhcnJvbGxvXHJcbiAgICogXHJcbiAgICogKi9cclxuICBkZWJ1ZzogYW55ID0ge1xyXG5cclxuICAgIHNob3dHcmFwaDogKCkgPT4ge1xyXG4gICAgICBjb25zdCB0YWJsZTogYW55ID0ge31cclxuICAgICAgY29uc3QgbmFtZXMgPSB0aGlzLnN0YXRpb25MaXN0Lm1hcChzID0+IHMubmFtZSlcclxuICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcclxuICAgICAgICB0YWJsZVtuYW1lXSA9IHt9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ3JhcGgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuZ3JhcGhbaV0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgIHRhYmxlW25hbWVzW2ldXVtuYW1lc1tqXV0gPSB0aGlzLmdyYXBoW2ldW2pdXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLnRhYmxlKHRhYmxlKVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzaG93RGlzdGFuY2VzOiAoKSA9PiB7XHJcblxyXG4gICAgLy8gICBjb25zb2xlLmxvZygnRGlzdGFuY2VzIDo+PiAnLCB0aGlzLl9sYXN0RGlzdGFuY2VzLm1hcCgoZCwgaSkgPT4gKFt0aGlzLnN0YXRpb25MaXN0W2ldLm5hbWUsIGRdKSkpO1xyXG5cclxuICAgIC8vIH0sXHJcbiAgICAvLyBzaG93UGF0aHM6ICgpID0+IHtcclxuXHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdQYXRocyA6Pj4gJywgdGhpcy5fbGFzdFBhdGhzLm1hcCgoZCwgaSkgPT4gKGQubWFwKG4gPT4gdGhpcy5zdGF0aW9uTGlzdFtuXS5uYW1lKS5qb2luKCctJykpKSk7XHJcblxyXG4gICAgLy8gfVxyXG5cclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBTdGF0aW9uIGZyb20gXCIuL0NsYXNzZXMvU3RhdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlR3JhcGgoc3RhdGlvbnM6IFN0YXRpb25bXSk6IG51bWJlcltdW10ge1xuXG4gIHJldHVybiBzdGF0aW9ucy5tYXAoKHN0YXRpb25feDogU3RhdGlvbikgPT4ge1xuXG4gICAgcmV0dXJuIHN0YXRpb25zLm1hcCgoc3RhdGlvbl95OiBTdGF0aW9uKSA9PiB7XG5cbiAgICAgIHJldHVybiBzdGF0aW9uX3gudG8uaW5jbHVkZXMoc3RhdGlvbl95LmlkKSA/IDEgOiAwXG5cbiAgICB9KVxuXG4gIH0pXG5cbn1cbiIsImltcG9ydCBTdGF0aW9uIGZyb20gXCIuL0NsYXNzZXMvU3RhdGlvblwiO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIERpamtzdHJhIEFsZ29yaXRobSB1c2luZyBhZGphY2VuY3kgbWF0cml4LlxuICogVGhpcyByZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGxlbmd0aCBvZiB0aGUgc2hvcnRlc3QgcGF0aCBmcm9tIHRoZSBzdGFydCBub2RlIHRvIGVhY2ggb3RoZXIgbm9kZS5cbiAqIEl0IGlzIG9ubHkgZ3VhcmFudGVlZCB0byByZXR1cm4gY29ycmVjdCByZXN1bHRzIGlmIHRoZXJlIGFyZSBubyBuZWdhdGl2ZSBlZGdlcyBpbiB0aGUgZ3JhcGguIFBvc2l0aXZlIGN5Y2xlcyBhcmUgZmluZS5cbiAqIFRoaXMgaGFzIGEgcnVudGltZSBvZiBPKHxWfF4yKSAofFZ8ID0gbnVtYmVyIG9mIE5vZGVzKSwgZm9yIGEgZmFzdGVyIGltcGxlbWVudGF0aW9uIHNlZSBAc2VlIC4uL2Zhc3QvRGlqa3N0cmEuamF2YSAodXNpbmcgYWRqYWNlbmN5IGxpc3RzKVxuICpcbiAqIFxuICogXG4gKiBcbiAqIFxuICogRWRpdGVkIHRvIHNraXAgc3RhdGlvbnMgYWNjb3JkaW5nIHRvIHRyYWluIGNvbG9yLCBwbHVzIHJldHVybiB0aGUgc2hvcnRlc3QgcGF0aC5cbiAqIFxuICogXG4gKiBcbiAqIFxuICogXG4gKiBAcGFyYW0gZ3JhcGggYW4gYWRqYWNlbmN5LW1hdHJpeC1yZXByZXNlbnRhdGlvbiBvZiB0aGUgZ3JhcGggd2hlcmUgKHgseSkgaXMgdGhlIHdlaWdodCBvZiB0aGUgZWRnZSBvciAwIGlmIHRoZXJlIGlzIG5vIGVkZ2UuXG4gKiBAcGFyYW0gc3RhcnQgdGhlIG5vZGUgdG8gc3RhcnQgZnJvbS5cbiAqIEBwYXJhbSBub2RlcyBhcnJheSBvZiBTdGF0aW9uIG9iamVjdCwgY29udGFpbiBkZSBub2RlIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0gdHJhaW5Db2xvciBzdHJpbmcgdG8gY29tcGFyZSB3aXRoIHN0YXRpb24gY29sb3JcbiAqIEByZXR1cm4gZGlzdGFuY2VzOiBhbiBhcnJheSBjb250YWluaW5nIHRoZSBzaG9ydGVzdCBkaXN0YW5jZXMgZnJvbSB0aGUgZ2l2ZW4gc3RhcnQgbm9kZSB0byBlYWNoIG90aGVyIG5vZGVcbiAqIEByZXR1cm4gcmVhbFBhdGhzOiBhbiBhcnJheSBjb250YWluaW5nIHRoZSBzaG9ydGVzdCBwYXRoIGZyb20gdGhlIGdpdmVuIHN0YXJ0IG5vZGUgdG8gZWFjaCBvdGhlciBub2RlXG4gKi9cbmNvbnN0IGRpamtzdHJhID0gZnVuY3Rpb24gKGdyYXBoOiBudW1iZXJbXVtdLCBzdGFydDogbnVtYmVyLCBub2RlczogU3RhdGlvbltdLCB0cmFpbkNvbG9yPzogc3RyaW5nKToge1xuICAgIGRpc3RhbmNlczogbnVtYmVyW10sIHJlYWxQYXRoczogbnVtYmVyW11bXSwgc2hvcnRQYXRoOiBudW1iZXJbXVtdXG59IHtcblxuICAgIC8vVGhpcyBjb250YWlucyB0aGUgZGlzdGFuY2VzIGZyb20gdGhlIHN0YXJ0IG5vZGUgdG8gYWxsIG90aGVyIG5vZGVzXG4gICAgY29uc3QgZGlzdGFuY2VzOiBudW1iZXJbXSA9IFtdO1xuXG4gICAgLy9Db250ZW5kcmEgbG9zIG5vZG9zIGRlIGxhIGRpc3RhbmNpYSBtYXMgY29ydGFcbiAgICBjb25zdCByZWFsUGF0aHM6IG51bWJlcltdW10gPSBbW11dO1xuICAgIGNvbnN0IHNob3J0UGF0aDogbnVtYmVyW11bXSA9IFtbXV07XG5cbiAgICAvL0luaXRpYWxpemluZyB3aXRoIGEgZGlzdGFuY2Ugb2YgXCJJbmZpbml0eVwiXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncmFwaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBkaXN0YW5jZXNbaV0gPSBJbmZpbml0eTtcbiAgICAgICAgcmVhbFBhdGhzW2ldID0gW107XG4gICAgICAgIHNob3J0UGF0aFtpXSA9IFtdO1xuICAgIH1cbiAgICAvL1RoZSBkaXN0YW5jZSBmcm9tIHRoZSBzdGFydCBub2RlIHRvIGl0c2VsZiBpcyBvZiBjb3Vyc2UgMFxuICAgIGRpc3RhbmNlc1tzdGFydF0gPSAwO1xuXG4gICAgLy9UaGlzIGNvbnRhaW5zIHdoZXRoZXIgYSBub2RlIHdhcyBhbHJlYWR5IHZpc2l0ZWRcbiAgICBjb25zdCB2aXNpdGVkOiBib29sZWFuW10gPSBbXTtcblxuICAgIC8vV2hpbGUgdGhlcmUgYXJlIG5vZGVzIGxlZnQgdG8gdmlzaXQuLi5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAvLyAuLi4gZmluZCB0aGUgbm9kZSB3aXRoIHRoZSBjdXJyZW50bHkgc2hvcnRlc3QgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnQgbm9kZS4uLlxuICAgICAgICBsZXQgc2hvcnRlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuICAgICAgICBsZXQgbm9kZUluZGV4ID0gLTE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JhcGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vLi4uIGJ5IGdvaW5nIHRocm91Z2ggYWxsIG5vZGVzIHRoYXQgaGF2ZW4ndCBiZWVuIHZpc2l0ZWQgeWV0XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2VzW2ldIDwgc2hvcnRlc3REaXN0YW5jZSAmJiAhdmlzaXRlZFtpXSkge1xuICAgICAgICAgICAgICAgIHNob3J0ZXN0RGlzdGFuY2UgPSBkaXN0YW5jZXNbaV07XG4gICAgICAgICAgICAgICAgbm9kZUluZGV4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBUaGVyZSB3YXMgbm8gbm9kZSBub3QgeWV0IHZpc2l0ZWQgLS0+IFdlIGFyZSBkb25lXG4gICAgICAgICAgICByZXR1cm4geyBkaXN0YW5jZXMsIHJlYWxQYXRocywgc2hvcnRQYXRoIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJWaXNpdGluZyBub2RlIFwiLCBub2RlSW5kZXgsIG5vZGVzW25vZGVJbmRleF0ubmFtZSwgXCIgd2l0aCBjdXJyZW50IGRpc3RhbmNlIFwiICsgc2hvcnRlc3REaXN0YW5jZSk7XG5cbiAgICAgICAgLy8uLi50aGVuLCBmb3IgYWxsIG5laWdoYm9yaW5nIG5vZGVzLi4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYXBoW25vZGVJbmRleF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vLi4uaWYgdGhlIHBhdGggb3ZlciB0aGlzIGVkZ2UgaXMgc2hvcnRlci4uLlxuICAgICAgICAgICAgaWYgKGdyYXBoW25vZGVJbmRleF1baV0gIT09IDAgJiYgZGlzdGFuY2VzW2ldID4gZGlzdGFuY2VzW25vZGVJbmRleF0gKyBncmFwaFtub2RlSW5kZXhdW2ldKSB7XG4gICAgICAgICAgICAgICAgLy8uLi5TYXZlIHRoaXMgcGF0aCBhcyBuZXcgc2hvcnRlc3QgcGF0aC5cblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0cmFpbiBjb2xvciBpcyBub3Qgc3BlY2lmaWVkLCBpdCBwYXNzZXMgdGhyb3VnaCBhbGwgbm9kZXNcbiAgICAgICAgICAgICAgICBpZiggIXRyYWluQ29sb3IgKXtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VzW2ldID0gZGlzdGFuY2VzW25vZGVJbmRleF0gKyBncmFwaFtub2RlSW5kZXhdW2ldO1xuICAgICAgICAgICAgICAgICAgICBzaG9ydFBhdGhbaV0gPSBbLi4uc2hvcnRQYXRoW25vZGVJbmRleF0sIGldO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS5jb2xvciA9PT0gbnVsbCB8fCB0cmFpbkNvbG9yID09PSBub2Rlc1tpXS5jb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VzW2ldID0gZGlzdGFuY2VzW25vZGVJbmRleF0gKyBncmFwaFtub2RlSW5kZXhdW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRQYXRoW2ldID0gWy4uLnNob3J0UGF0aFtub2RlSW5kZXhdLCBpXTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZXNbaV0gPSBkaXN0YW5jZXNbbm9kZUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0UGF0aFtpXSA9IHNob3J0UGF0aFtub2RlSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWFsUGF0aHNbaV0gPSBbLi4ucmVhbFBhdGhzW25vZGVJbmRleF0sIGldO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGFzdGx5LCBub3RlIHRoYXQgd2UgYXJlIGZpbmlzaGVkIHdpdGggdGhpcyBub2RlLlxuICAgICAgICB2aXNpdGVkW25vZGVJbmRleF0gPSB0cnVlO1xuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKFwiVmlzaXRlZCBub2RlczogXCIgKyB2aXNpdGVkKTtcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhcIkN1cnJlbnRseSBsb3dlc3QgZGlzdGFuY2VzOiBcIiArIGRpc3RhbmNlcyk7XG5cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkaWprc3RyYTsiLCJpbXBvcnQgbG9hZE5ldHdvcmsgZnJvbSAnLi9sb2FkTmV0d29yayc7XG5pbXBvcnQgb2RkX2V2ZW4gZnJvbSAnLi9vZGRfZXZlbic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9hZE5ldHdvcms6IGxvYWROZXR3b3JrLFxuICBvZGRfZXZlbjogb2RkX2V2ZW4sXG59XG4iLCJpbXBvcnQgU3RhdGlvbk5ldHdvcmsgZnJvbSAnLi9DbGFzc2VzL1N0YXRpb25OZXR3b3JrJ1xuXG5jb25zdCBkZWJ1ZyA9IHRydWVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZE5ldHdvcmsobmV0d29ya0pTT046IGFueSk6IFN0YXRpb25OZXR3b3JrIHtcblxuICAvL1RPRE86IHZhbGlkYWNpb25lc1xuICAvLyBjb25zdCBzdGF0aW9uTmV0d29yay5zdGF0aW9uTGlzdCA9IG5ldHdvcmtKU09OLnN0YXRpb25zLm1hcChzID0+IG5ldyBTdGF0aW9uKHMpKVxuICBjb25zdCBzdGF0aW9uTmV0d29yayA9IG5ldyBTdGF0aW9uTmV0d29yayhuZXR3b3JrSlNPTilcblxuICByZXR1cm4gc3RhdGlvbk5ldHdvcmtcbn1cbiIsImV4cG9ydCBkZWZhdWx0ICh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGFsZ28gPSBcIjJcIlxuXG4gIHJldHVybiB2YWx1ZSAlIDIgPT0gMCA/IHRydWUgOiBmYWxzZSB8fCBhbGdvLmluY2x1ZGVzKCcnKVxufVxuIl0sIm5hbWVzIjpbIlN0YXRpb24iLCJbb2JqZWN0IE9iamVjdF0iLCJpZCIsIm5hbWUiLCJjb2xvciIsInRvIiwidGhpcyIsIlN0YXRpb25OZXR3b3JrIiwibmV0d29ya0pTT04iLCJzaG93R3JhcGgiLCJ0YWJsZSIsIm5hbWVzIiwic3RhdGlvbkxpc3QiLCJtYXAiLCJzIiwiZm9yRWFjaCIsImkiLCJncmFwaCIsImxlbmd0aCIsImoiLCJjb25zb2xlIiwiQXJyYXkiLCJpc0FycmF5Iiwic3RhdGlvbnMiLCJFcnJvciIsInN0YXRpb25feCIsInN0YXRpb25feSIsImluY2x1ZGVzIiwiZnJvbSIsInRyYWluQ29sb3IiLCJmcm9tU3RhdGlvbmluZGV4IiwiZmluZEluZGV4IiwidG9TdGF0aW9uaW5kZXgiLCJyZWFsUGF0aHMiLCJzaG9ydFBhdGgiLCJzdGFydCIsIm5vZGVzIiwiZGlzdGFuY2VzIiwiSW5maW5pdHkiLCJ2aXNpdGVkIiwic2hvcnRlc3REaXN0YW5jZSIsIm5vZGVJbmRleCIsImRpamtzdHJhIiwibiIsInJlYWxQYXRoIiwibG9hZE5ldHdvcmsiLCJvZGRfZXZlbiIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7NkNBQXFCQSxFQU1uQkMsYUFBWUMsR0FBRUEsRUFBRUMsS0FBRUEsRUFBSUMsTUFBRUEsRUFBS0MsR0FBRUEsSUFHN0JDLEtBQUtKLEdBQUtBLEVBQUssR0FDZkksS0FBS0gsS0FBT0EsR0FBUUcsS0FBS0osR0FDekJJLEtBQUtGLE1BQVFBLEdBQVMsS0FDdEJFLEtBQUtELEdBQUtBLEdBQU0sVUNOQ0UsRUFRbkJOLFlBQVlPLEdBRVYsR0FSRkYsaUJBQXlCLEdBQ3pCQSxXQUFvQixDQUFDLElBMERyQkEsV0FBYSxDQUVYRyxVQUFXLEtBQ1QsTUFBTUMsRUFBYSxHQUNiQyxFQUFRTCxLQUFLTSxZQUFZQyxLQUFJQyxHQUFLQSxFQUFFWCxPQUMxQ1EsRUFBTUksU0FBUVosSUFDWk8sRUFBTVAsR0FBUSxNQUdoQixJQUFL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
